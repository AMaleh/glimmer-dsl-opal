# Copyright (c) 2020 Andy Maleh
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

require 'glimmer/swt/image_data'

module Glimmer
  module SWT
    # Adapter for org.eclipse.swt.graphics.Image to use in Glimmer DSL for Opal
    #
    # Follows the Adapter Design Pattern
    class ImageProxy
      class << self
        def create(*args)
          if args.size == 1 && args.first.is_a?(ImageProxy)
            args.first
          else
            new(*args)
          end
        end
      end
      
      attr_reader :file_path, :image_data
      
      # Initializes a proxy for an SWT Image object
      #
      # Takes the same args as the SWT Image class
      # Alternatively, takes a file path string or a uri:classloader file path string (generated by JRuby when invoking `File.expand_path` inside a JAR file)
      # and returns an image object.
      def initialize(*args)
        @args = args
        options = @args.last.is_a?(Hash) ? @args.delete_at(-1) : {}
        @file_path = @args.first if @args.size == 1 && @args.first.is_a?(String)
        if @file_path
          @image_data = ImageData.new(@file_path)
          width = options[:width]
          height = options[:height]
          height = (@image_data.height.to_f / @image_data.width.to_f)*width.to_f if !width.nil? && height.nil?
          width = (@image_data.width.to_f / @image_data.height.to_f)*height.to_f if !height.nil? && width.nil?
          scale_to(width, height) unless width.nil? || height.nil?
        end        
      end
      
      def scale_to(width, height)
        image_data.scaledTo(width, height)
        self
      end
      
    end
    
  end
  
end
